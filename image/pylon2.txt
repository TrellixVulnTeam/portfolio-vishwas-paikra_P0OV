#include<bits/stdc++.h>
#define int_max 1000000000000000000
#define int_min -1000000000000000000
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define os tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
#define ll long long int
#define mp make_pair
#define pb push_back
#define eb emplace_back
#define F first
#define S second
#define pi pair<int,int>
#define ppi pair<int,pair<int,int>>
#define pl pair<ll,ll>
#define pll pair<ll,pair<ll,ll>>
#define ump unordered_map
#define pq priority_queue
#define all(v) v.begin(),v.end()
#define ceil(a,b) a%b==0?a/b:1+a/b
#define floor(a,b) a/b
//#define mo 1000000007
#define in(i,a,b) for(int i=a;i<=b;i++) cin>>a[i]
//#define check cout<<"00"<<endl
#define ok order_of_key
#define fo find_by_order
#define fio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define rff freopen("input.in","r",stdin); freopen("output.out","w",stdout);
//#define os tree<pll, null_type,greater<pll>, rb_tree_tag,tree_order_statistics_node_update>
#define pq priority_queue
/*
ll mf(ll a, ll b)
{
    return ((a%mo)*(b%mo))%mo;
}
ll pf(ll a, ll b)
{
   if(b==0)  return 1;
   if(b==1)  return a;
   ll c=a;
   a=pf(a,b/2);
   a=mf(a,a);
   if(b%2==1)
   a=mf(a,c);
   return a;
}
bool cond(int xx, int yy)
{
    if(xx<1 || xx>n || yy<1 || yy>m || vis[xx][yy]!=-1)
    return 0;
    return 1;
}
bool comp(pl a, pl b)
{
    if(a.F==b.F)
    return a.S<b.S;
    return a.F<b.F;
}//for decreasing order
/*------------------------X----------------------------debug-------------------------X---------------------------*/
#define mx 100010
bool condition(int x, int y, int i, int j)
{
    if(i==x || j==y || (i+j)==(x+y) || (i-j)==(x-y)) return false;
    return true;
}
int dfs(int a[21][21], int n, int m, int x, int y,int k)
{
    //cout<<x<<y<<endl;
    a[x][y]=k;
    int b[21][21];
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            b[i][j]=a[i][j];
        }
    }
    //cout<<endl;
    int ans=1;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(b[i][j]==0)
            {
               ans=0; 
               break;
            }
        }
    }
    if(ans==1) return 1;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            //cout<<i<<" "<<j<<" "<<x<<" "<<y<<" ";
            //cout<<condition(x,y,i,j)<<endl;
            if(condition(x,y,i,j)==true && b[i][j]==0)
            {
                ans=ans or dfs(b,n,m,i,j,k+1);
            }
        }
    }
    if(ans==0)
    a[x][y]=0;
    else
    {
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                a[i][j]=b[i][j];
            }
        }
    }
    return ans;
}
void soln(int k)
{
    int a[21][21];
    memset(a,0,sizeof(a));
    int n,m;
    cin>>n>>m;
    ll ans=0;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            ans=ans or dfs(a,n,m,i,j,1);
            if(ans==1)
            break;
        }
    }
    if(ans==0)
    cout<<"Case #"<<k<<": "<<"IMPOSSIBLE"<<endl;
    else
    {
        cout<<"Case #"<<k<<": "<<"POSSIBLE"<<endl;
        vector<pair<int,int>>v(n*m +1);
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                //cout<<a[i][j]<<" ";
                v[a[i][j]]=mp(i,j);
            }
        }
        //cout<<endl;
        for(int i=1;i<=(n*m);i++)
        {
            cout<<v[i].F<<" "<<v[i].S<<endl;
        }
    }
}
int main()
{
    ll t=1;
    cin>>t;
    int k=0;
    while(t--)
    {
        k++;
        soln(k);
        //cout<<endl;
    }
}